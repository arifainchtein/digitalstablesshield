/*
 * AquabubblerManager.cpp
 * This code must be generated by the spermatogenesis process
 *  Created on: 7 Oct 2019
 *      Author: arifainchtein
 */
#include "Arduino.h"
#include <AquabubblerManager.h>



// connect a flow meter to an interrupt pin (see notes on your Arduino model for pin numbers)

TimeManager&  timeManager;
DataStorageManager&  dataStorageManager;
HardwareSerial& _HardSerial;

const unsigned long period = 1000;
boolean meter0InEvent = false;
boolean meter1InEvent = false;
boolean meter2InEvent = false;
boolean meter3InEvent = false;
boolean meter4InEvent = false;
boolean meter10InEvent = false;


#define flow_0 9
#define flow_1 8
#define flow_2 7
#define flow_3 6
#define flow_4 46
#define flow_10 45

FlowMeter Meter0 = FlowMeter(flow_0);
FlowMeter Meter1 = FlowMeter(flow_1);
FlowMeter* Meter2 = FlowMeter(flow_2);
FlowMeter* Meter3 = FlowMeter(flow_3);
FlowMeter* Meter4 = FlowMeter(flow_4);
FlowMeter Meter10 = FlowMeter(flow_10);

int stateflow = 0;
uint32_t counterflow[6] = {0,0,0,0,0,0};

AquabubblerManager::AquabubblerManager( DataStorageManager& sd, TimeManager& t, HardwareSerial& serial ):  dataStorageManager(sd),timeManager(t), _HardSerial(serial)
{}




void AquabubblerManager::begin(int numberOfWaterPoints) {

	pinMode(flow_0, INPUT);
	attachInterrupt(digitalPinToInterrupt(flow_0), sensor_0, LOW);


	pinMode(flow_1, INPUT);
	attachInterrupt(digitalPinToInterrupt(flow_1), sensor_1, LOW);

	if(numberOfWaterPoints>1){
		pinMode(flow_2, INPUT);
		 attachInterrupt(digitalPinToInterrupt(flow_2), sensor_2, LOW);

	}
	if(numberOfWaterPoints>2){
		pinMode(flow_3, INPUT);
		attachInterrupt(digitalPinToInterrupt(flow_3), sensor_3, LOW);

	}
	if(numberOfWaterPoints>3){
		pinMode(flow_4, INPUT);;
		attachInterrupt(digitalPinToInterrupt(flow_4), sensor_4, LOW);

	}
	pinMode(flow_10, INPUT);
	attachInterrupt(digitalPinToInterrupt(flow_10), sensor_10, LOW);

}

static void AquabubblerManager::updateValues(){
	//
	// if water is not running in any of the meters
	// then if the event is going, close the event
	Meter0.tick(period);
	if(Meter0.getCurrentFrequency()>0){
		meter0InEvent=true;
		flowRateMeter0.getCurrentFlowrate();
		gravityRTC.

	}else{
		if(meter0InEvent){
			//
			// if we are here it means that there is no
			// water flowing through the meter now
			// but since we were in an event
			// it means that event is finished so
			// create a aFlowMeterEventData and store it
			//
			// since the last time check,
			// this means that the event is finished
			//
			FlowMeterEventData aFlowMeterEventData;
			aFlowMeterEventData.startTime
		}
	}
}


static void AquabubblerManager::sensor_0(){
	 Meter0.count();
}

static void AquabubblerManager::sensor_1(){
  counterflow[1]++;
  stateflow|=0x01;
}

static void AquabubblerManager::sensor_2(){
  counterflow[1]++;
  stateflow|=0x02;
}

static void AquabubblerManager::sensor_3(){
  counterflow[2]++;
  stateflow|=0x04;
}

static void AquabubblerManager::sensor_4(){
  counterflow[3]++;
  stateflow|=0x08;
}

static void AquabubblerManager::sensor_10(){
  counterflow[4]++;
  stateflow|=0x10;
}



AquabubblerManager::~AquabubblerManager() {
	// TODO Auto-generated destructor stub
}

