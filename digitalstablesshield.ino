#include <GroveLCD.h>
#include <NoLCD.h>
#include <DiscreteRecord.h>

#include <avr/wdt.h>
#include <PowerManager.h>


/**
 * teleonome speciifc libraries
 */


/**
 * teleonome speciifc variables
 */
GroveLCD groveLCD;
NoLCD noLCD;




static const char *LIFE_CYCLE_EVENT_SETUP_COMPLETED="Setup Method Completed";
static const int LIFE_CYCLE_EVENT_COMMA_VALUE=1;





GeneralFunctions generalFunctions;
TimeManager timeManager(generalFunctions, Serial);
SecretManager secretManager(timeManager);
SDCardManager sdCardManager(timeManager, generalFunctions, Serial, groveLCD );
PowerManager aPowerManager(groveLCD , secretManager , sdCardManager , timeManager, generalFunctions, Serial);




/**
 * Teleonome Specific Functions
 *  Generated by the Spermatogenesis process
 */

struct discreteRecord createDiscreteRecord(float la, float lo, int pan, int tag, uint8_t ss ){
	DiscreteRecord discrete;
	discrete.lat=la
	discrete.lon=lo;
	discrete.timestamp = timeManager.getCurrentTimeInSeconds();
	discrete.panID=pan;
	discrete.tagId=tag;
	discrete.signalStrength=ss;
}
/**
 * End of Teleonome Specific Functions
 */




/***************************************************
 *  Name:        ISR(WDT_vect)
 *
 *  Returns:     Nothing.
 *
 *  Parameters:  None.
 *
 *  Description: Watchdog Interrupt Service. This
 *               is executed when watchdog timed out.
 *
 ***************************************************/
ISR(WDT_vect){
	//lcd.setCursor(0, 1);
	//lcd.print("Waking Up") ;
	//wdt_reset();

	// uncomment
	aPowerManager.toggleWDT();



	//	if(f_wdt == 0)
	//	{
	//		f_wdt=1;
	//	}
	//	else
	//	{
	//		//_HardSerial.println("WDT Overrun!!!");
	//	}
}

void setup() {
	//
	// Start the Serial Ports
	//
	Serial.begin(9600);
	Serial1.begin(9600);
	Serial2.begin(9600);
	Serial3.begin(9600);
	groveLCD.begin();
	//	//
	//	// Start The Managers
	//	//
	groveLCD.setCursor(0, 0);
	groveLCD.clear();
	groveLCD.print("Init Time Manager") ;
	groveLCD.setCursor(0, 1);
	groveLCD.print("1 of 3") ;
	timeManager.start();
	//
	groveLCD.clear();
	groveLCD.print("Init SDCard Manager") ;
	groveLCD.setCursor(0, 1);
	groveLCD.print("2 of 3") ;
	sdCardManager.start();
	//
	groveLCD.clear();
	groveLCD.print("Init Power Manager") ;
	groveLCD.setCursor(0, 1);
	groveLCD.print("3 of 3") ;
	aPowerManager.start();
	//
	long totalDiskUse=sdCardManager.getDiskUsage()/1024;

	/*
	 * Initialize the LCD Screen
	 */
	groveLCD.clear();
	groveLCD.setCursor(0, 0);
	groveLCD.print("Init Finished") ;
	groveLCD.setCursor(0, 1);

	groveLCD.setCursor(0, 1);
	groveLCD.print("SD use ") ;
	groveLCD.print(totalDiskUse) ;
	groveLCD.print("Kb") ;

	//
	// end of initializing lcd
	//
	delay(1000);
	long now = timeManager.getCurrentTimeInSeconds();

	sdCardManager.storeLifeCycleEvent(now, LIFE_CYCLE_EVENT_SETUP_COMPLETED, LIFE_CYCLE_EVENT_COMMA_VALUE);
}


void loop() {

	wdt_reset();



	//
	// Generate the SensorData String


	//
	// now define the state its in
	//
	aPowerManager.defineState();
	//
	// the commands
	//
	if( Serial.available() != 0) {
		//lcd.clear();

		String command = Serial.readString();
		//
		// end of teleonome specific sensors
		//



		boolean commandProcessed =  aPowerManager.processDefaultCommands( command);

		/*
		 * teleonome specific sensors
		 */

		/*
		 * end f teleonome specific sensors
		 */
		if(!commandProcessed){
			//
			// add device specific
			if(command.startsWith("GetSensorData")){

				groveLCD.clear();

				groveLCD.setCursor(0, 0);
				groveLCD.print("b:");
				long b = millis();
				groveLCD.print(b);
				String sensorDataString= aPowerManager.getBaseSensorString();
				int now = (int)(millis() - b);
				//
				// now add the teleonome specific sensors
				//

				groveLCD.setCursor(0, 1);
				groveLCD.print("e:");
				groveLCD.print(now);


				Serial.println(sensorDataString);
				Serial.flush();
			}else if(command.startsWith("ReadDiscreteRecords")){
				boolean keepGoing=true;
				DiscreteRecord& discreteRecord;
				uint8_t index=0;
				while(keepGoing){
					keepGoing = sdCardManager.readDiscreteRecord(index, discreteRecord);
					if(keepGoing){
						//
						// if we are here is because we do have data
						// so extract it
						//
						// generated code
						//
						String discreteRecordString="";
						discreteRecordString.concat(discreteRecord.timestamp) ;
						discreteRecordString.concat("#") ;
						discreteRecordString.concat(discreteRecord.lat) ;
						discreteRecordString.concat("#") ;
						discreteRecordString.concat(discreteRecord.lon) ;
						discreteRecordString.concat("#") ;
						discreteRecordString.concat(discreteRecord.panID) ;
						discreteRecordString.concat("#") ;
						discreteRecordString.concat(discreteRecord.tagId) ;
						discreteRecordString.concat("#") ;
						discreteRecordString.concat(discreteRecord.signalStrength) ;
						discreteRecordString.concat("#") ;
						Serial.println(discreteRecordString);

					}
					Serial.println("Ok-ReadDiscreteRecords");
					Serial.flush();
				}
			}else{
				//
				// call read to flush the incoming
				//
				Serial.read();
				Serial.println("Failure-Bad Command " + command);
				Serial.flush();
			}
		}

		// this is the end of the loop, to calculate the energy spent on this loop
		// take the time substract the time at the beginning of the loop (the now variable defined above)
		// and also substract the seconds spent in powerdownMode
		// finally add the poweredDownInLoopSeconds to the daily total

		aPowerManager.endOfLoopProcessing();

	}
}
